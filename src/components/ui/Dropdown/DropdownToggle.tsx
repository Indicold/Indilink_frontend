/* The code is importing various dependencies and types from different modules: */
import { forwardRef } from 'react'
import classNames from 'classnames'
import {
    HiChevronDown,
    HiChevronUp,
    HiChevronRight,
    HiChevronLeft,
} from 'react-icons/hi'
import type { CommonProps } from '../@types/common'
import type { DropdownPlacement } from '../@types/placement'
import type { ReactNode } from 'react'

/* The `export interface DropdownToggleSharedProps` is defining a TypeScript interface for the shared
props of the `DropdownToggle` component. */
export interface DropdownToggleSharedProps {
    renderTitle?: ReactNode
    placement?: DropdownPlacement
    toggleClassName?: string
}

/* The `interface DropdownToggleProps` is defining a TypeScript interface for the props of the
`DropdownToggle` component. It extends two other interfaces: `CommonProps` and
`DropdownToggleSharedProps`. */
interface DropdownToggleProps extends CommonProps, DropdownToggleSharedProps {
    disabled?: boolean
    id?: string
}

/**
 * The function `DropdownToggleDefaultContent` returns different content based on the `placement` prop.
 * @param  - - `placement`: A string that represents the placement of the dropdown toggle. It can have
 * values like "middle-start", "middle-end", "top", etc.
 * @returns JSX elements based on the value of the `placement` prop. If the `placement` prop includes
 * 'middle-start', it returns the `children` prop followed by the `HiChevronRight` component. If the
 * `placement` prop includes 'middle-end', it returns the `HiChevronLeft` component followed by the
 * `children` prop. If the `placement` prop
 */
const DropdownToggleDefaultContent = ({
    placement,
    children,
}: {
    placement: DropdownPlacement
    children: string | ReactNode
}) => {
    if (placement && placement.includes('middle-start')) {
        return (
            <>
                {children}
                <HiChevronRight />
            </>
        )
    }

    if (placement && placement.includes('middle-end')) {
        return (
            <>
                <HiChevronLeft />
                {children}
            </>
        )
    }

    if (placement && placement.includes('top')) {
        return (
            <>
                {children}
                <HiChevronUp />
            </>
        )
    }

    return (
        <>
            {children}
            <HiChevronDown />
        </>
    )
}

/* The `const DropdownToggle = forwardRef<HTMLDivElement, DropdownToggleProps>(...)` line is defining a
functional component called `DropdownToggle` using the `forwardRef` function from React. */
const DropdownToggle = forwardRef<HTMLDivElement, DropdownToggleProps>(
    (props, ref) => {
        /* The code is using object destructuring to extract specific properties from the `props`
        object. */
        const {
            className,
            renderTitle,
            children,
            placement = 'bottom-start',
            disabled,
            toggleClassName,
            ...rest
        } = props

        const toggleClass = 'dropdown-toggle'
        const disabledClass = 'dropdown-toggle-disabled'

        /* The `const dropdownToggleClass = classNames(...)` line is using the `classNames` function
        from the `classnames` module to generate a string of CSS class names based on the provided
        arguments. */
        const dropdownToggleClass = classNames(
            toggleClass,
            className,
            toggleClassName,
            disabled && disabledClass
        )

        /* The code `const dropdownToggleDefaultClass = classNames(dropdownToggleClass,
        'dropdown-toggle-default')` is generating a string of CSS class names based on the provided
        arguments. It combines the `dropdownToggleClass` variable, which contains the CSS class
        names generated based on the `toggleClass`, `className`, `toggleClassName`, and `disabled`
        props, with the string `'dropdown-toggle-default'`. The resulting string of CSS class names
        is stored in the `dropdownToggleDefaultClass` variable. */
        const dropdownToggleDefaultClass = classNames(
            dropdownToggleClass,
            'dropdown-toggle-default'
        )

        /* The `if (renderTitle)` condition checks if the `renderTitle` prop is provided. If it is, it
        returns a `<div>` element with the CSS class names generated by the `dropdownToggleClass`
        variable. The `...rest` spread operator is used to pass any additional props to the `<div>`
        element. The `ref` prop is used to assign a reference to the `<div>` element. The
        `renderTitle` prop is rendered as the content of the `<div>` element. */
        if (renderTitle) {
            return (
                <div className={dropdownToggleClass} {...rest} ref={ref}>
                    {renderTitle}
                </div>
            )
        }

        return (
            <div ref={ref} className={dropdownToggleDefaultClass} {...rest}>
                <span className="flex items-center">
                    <DropdownToggleDefaultContent placement={placement}>
                        {children}
                    </DropdownToggleDefaultContent>
                </span>
            </div>
        )
    }
)

DropdownToggle.displayName = 'DropdownToggle'

export default DropdownToggle
